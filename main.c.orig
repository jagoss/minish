#include "minish.h"
#include <stdio.h>
#include <unistd.h>
#include <pwd.h>

#define CANTCOMANDOS 10
#define TRUE 1


#define HELP_CD     "cd [-|dir] - cambia de directorio corriente"
#define HELP_DIR    "dir [str]- muestra archivos en directorio corriente, que tengan 'str'"
#define HELP_EXIT   "exit [status] - finaliza el minish con un status de retorno (por defecto 0)"
#define HELP_HELP   "help [cd|dir|exit|help|history|getenv|pid|setenv|status|uid]"
#define HELP_HISTORY "history [N] - muestra los últimos N (10) comandos escritos"
#define HELP_GETENV "getenv var [var] - muestra valor de variable(s) de ambiente"
#define HELP_PID    "pid - muestra Process Id del minish"
#define HELP_SETENV "setenv var valor - agrega o cambia valor de variable de ambiente"
#define HELP_STATUS "status - muestra status de retorno de ultimo comando ejecutado"
#define HELP_UID    "uid - muestra nombre y número de usuario dueño del minish"

int builtin_cd(int argc, char **argv) {

    return 0;
}

int builtin_dir(int argc, char **argv) {
    return 0;
}
int builtin_exit(int argc, char **argv) {
    return 0;
}
int builtin_help(int argc, char **argv) {
    return 0;
}
int builtin_history(int argc, char **argv) {
    return 0;
}
int builtin_status(int argc, char **argv) {
    return 0;
}
int builtin_getenv(int argc, char **argv) {
    return 0;
}
int builtin_setenv(int argc, char **argv) {
    return 0;
}
int builtin_uid(int argc, char **argv) {
    return 0;
}
int builtin_pid(int argc, char **argv) {
    return 0;
}

struct builtin_struct builtin_arr[] = {
    {"cd", builtin_cd, HELP_CD},
    {"dir", builtin_dir, HELP_DIR},
    {"exit", builtin_exit, HELP_EXIT},
    {"help", builtin_help, HELP_HELP},
    {"history", builtin_history, HELP_HISTORY},
    {"status", builtin_status, HELP_STATUS},
    {"getenv", builtin_getenv, HELP_GETENV},
    {"setenv", builtin_setenv, HELP_SETENV},
    {"uid", builtin_uid, HELP_UID},
    {"pid", builtin_pid, HELP_PID},
};


int externo(int argc, char **argv) {
    return 0;
}

int linea2argv(char *linea, char **argv) {
    int numero_de_palabra = 0;
    enum {IN, OUT};
    int state = OUT;

    for(; *linea != '\0'; linea++) {

        if(*linea == ' ' || *linea == '\n' || *linea == '\t') {
            state = OUT;
            *linea='\0';
        } else if(state == OUT) {
            state = IN;
            *argv++ = linea;
        }
		
    }
    return 0;
}
/*
int ejecutar(int argc, char **argv){

	if(argc != 0){
		int cmd = 0;
		char * comandos[CANTCOMANDOS]; //cantidad de comandos internos
		comandos[0]= "exit";
		comandos[1]= "pid";
		comandos[2]= "uid";
		comandos[3]= "getenv";
		comandos[4]= "setenv";
		comandos[5]= "cd";
		comandos[6]= "status";
		comandos[7]= "help";
		comandos[8]= "dir";
		comandos[9]= "history";


		for(int i = 0;i < CANTCOMANDOS; i++){
			if(strcmp(argv[0],comandos[i]) == 0){
				cmd = i;
			}
		}

		switch(cmd){
		case 0:
			if(argv[1]!=NULL){
				exit(argv[1]);
			}else{
				exit(0);
			}
		break;
		case 1:
			getpid();
		break;
		case 2:
			struct passwd *infouser = getpwuid();
			printf("Nombre de usuario: %s\n",infouser->pw_name);
			printf("Id usuario: ",infouser->pw_uid) //pw_uid es una estructura, no se si esta bien
		break;
		case 3:
			getenv();
		break;
		case 4:
			setenv(argv[1], argv[2], argv[3]);
		break;
		case 5:
			* char variable;
			if(argv[1] == NULL){
				chdir("/home");
			}else if(strcmp(argv[1],"-")==0){
				chdir("..");
			}else{
				chdir(argv[1]);
			}
		break;
		case 6:

		break;
		case 7:

		break;
		case 8:

		break;
		case 9:

		break;



		}

	}
}
*/

void
prompt()
{
    fprintf(stderr, "%s> ", "$USER");
}




/*
void
loop(){
   int escribir = 0;
   char input[60];


    while(1){

    	fprintf(stderr, ">");
	fputs(getlogin(), stderr);
        if(getinput(input)){
		continue;
	}
    }
}*/

int main(int argc, char **argv) {
    char buf[1024];
    char **input;


read(0,buf,1024);

linea2argv(buf, input);
argc = strlen(argv);

for(int i = 0; i<argc; i++) {
    printf("%s\n", argv[i]);
}


}

}
